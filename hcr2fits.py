# -*- coding: utf-8 -*-
# Author: Alberto Sainz Dalda <asainz.solarphysics@gmail.com>

""" Routines to get IRIS Level 2 fits data using the IRIS L2
    data search tool at https://iris.lmsal.com/search/"""


import requests
import json
import os
import traceback



def get_fits(query_text, raster_only=False, sji_only=False, decompress=True,
        text_files=False, output_dir=None):


    """ Routine to get IRIS Level 2 fits data from the
    Heliophysics Coverage Registry (HCR) record(s) obtained
    from the query made at the IRIS L2 data search tool at
    https://iris.lmsal.com/search/

    Parameters
    ----------

    query_text: an string cotaineng the query text generated by the
        IRIS L2 data search tool at https://iris.lmsal.com/search/

    raster_only: `bool`
        If True, the code will only download/return the found compressed
        raster filenames. Default=False

    sji_only: `bool`
        If True, the code will only download/return the found compressed
        SJI filenames. Default=False

    decompress: `bool`
        If True, the code will try to decompress the donwloaded/
        returned files. Defaul=True

    text_files: `bool`
        If True, the code will create the shell-script files iris_wget_query.sh
        and, if decompress=True, iris_decompress_query.sh to be executed
        manually by the user. Default=False

    output_dir: `string`
        If set, the found compressed data will be downloaded and eventually
        decompressed in the providen directory. Default = None

    Returns
    -------

    list_urls: `list`
        A list containing the HTTP address to the each ot the files founds by
        the code in the response provided by the IRIS L2 data search tool.

    Notes
    -----
        The last version of this code can be found at:
        https://gitlab.com/LMSAL_HUB/iris_hub/iris_lmsalpy
        Comments can be sent to <asainz.solarphysics@gmail.com>

    """

    print('Requesting the query...')
    hcr = requests.get(query_text)
    hcr = hcr.json()
    hcr = hcr['Events']
    n_hcr = len(hcr)
    list_urls = list()
    for i in hcr:
        for j in i['groups']: 
            url_file = j['comp_data_url']
            if raster_only != False and sji_only == False: 
                if url_file.find('raster') != -1: list_urls.append(url_file)
            if raster_only == False and sji_only != False: 
                if url_file.find('SJI') != -1: list_urls.append(url_file)
            if (raster_only == False and sji_only == False) or (raster_only != False
                    and sji_only != False):
                list_urls.append(url_file)
    len_list_urls = len(list_urls)
    if len_list_urls > 0:
        owd = os.getcwd()
        outdir = owd
        if output_dir != None: outdir = output_dir
        if outdir[-1] != '/': outdir=outdir+'/'
        if text_files != False: 
            (filename,line_number,function_name,text_command)=traceback.extract_stack()[-2]
            print('Creating iris_wget_query.sh')
            with open('iris_wget_query.sh', 'w', encoding = 'utf-8') as f:
                f.write('#! /bin/csh\n')
                f.write('\n')
                f.write('# Script generated by using:\n')
                f.write('# {}\n'.format(text_command))
                f.write("# For the query text '{}'\n".format(query_text)) 
                f.write("\n")
                f.write('set owd = $PWD\n')
                f.write('cd {}\n'.format(outdir))
                f.write('echo \n')
                f.write('echo Working at {}\n'.format(outdir))
                f.write('echo \n')
                f.write("\n")
                for j, i in enumerate(list_urls): 
                    f.write("echo Downloading the file {} into {} \(\#{} of {}\) "
                          "... \n".format(i, outdir, j+1, len_list_urls))
                    f.write('wget -P {} {}\n'.format(outdir, i))
                    f.write("\n")
                f.write('echo \n')
                f.write('echo Coming back to $owd\n')
                f.write('echo \n')
                f.write('cd $owd\n')
            f.close()
            os.system('chmod a+x iris_wget_query.sh')
            if decompress != False:
                print('Creating iris_decompress_query.sh')
                with open('iris_decompress_query.sh', 'w', encoding = 'utf-8') as f:
                    f.write('#! /bin/csh\n')
                    f.write('\n')
                    f.write('# Script generated by using:\n')
                    f.write('# {}\n'.format(text_command))
                    f.write("# For the query text '{}'\n".format(query_text))
                    f.write("\n")
                    f.write('set owd = $PWD\n')
                    f.write('cd {}\n'.format(outdir))
                    f.write('echo \n')
                    f.write('echo Working at {}\n'.format(outdir))
                    f.write('echo \n')
                    f.write("\n")
                    for i in list_urls:
                        pos_iris = i.find('iris_l2') 
                        file2decompress = i[pos_iris:]
                        f.write("echo Decompressing the file {} in {} \(\#{} of {}\)"
                                "...\n".format(file2decompress, outdir, j+1, len_list_urls))
                        if file2decompress.find('tar.gz') != -1: 
                           f.write('tar xvfz {} -C {}\n'.format(file2decompress, outdir))
                           f.write('rm {}{}\n'.format(outdir, file2decompress))
                        else:
                           f.write('gunzip {}\n'.format(file2decompress))
                        f.write("\n")
                    f.write('echo \n')
                    f.write('echo Coming back to $owd\n')
                    f.write('echo \n')
                    f.write('cd $owd\n')
                f.close()
                os.system('chmod a+x iris_decompress_query.sh')
        else:
            try:
                for j, i in enumerate(list_urls):
                    print("Downloading the file {} into {} (#{} of {}) "
                          "...".format(i, outdir, j+1, len_list_urls))
                    os.system('wget -P {} {}'.format(outdir, i))
                    print("") 
            except:
                raise ValueError("WARNING: Somenthing went wrong. Is gunzip properly "
                               "installed")
            if decompress != False:
                try:
                    os.chdir(outdir)
                    for j, i in enumerate(list_urls):
                        pos_iris = i.find('iris_l2')
                        file2decompress = i[pos_iris:]
                        if os.path.isfile(file2decompress) == True:
                            print("Decompressing the file {} into {} (#{} of {}) "
                                  "...".format(file2decompress, outdir, j+1, len_list_urls))
                            if file2decompress.find('tar.gz') != -1: 
                               os.system('tar xvfz {}'.format(file2decompress))
                               os.system('rm {}'.format(file2decompress))
                            else:
                               os.system('gunzip {}'.format(file2decompress))
                            print("") 
                        else:
                            print('WARNING: {}{} is not a file.'.format())
                    os.chdir(owd)
                except:
                    os.chdir(owd)
                    raise ValueError('WARNING: Somenthing went wrong. Is gunzip/tar properly \
                        installed')
    else:
        print('None file was found.')
    return list_urls
